var helpers = require("../../../../../.nvm/versions/node/v14.16.0/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "LoginView", function () {
    return LoginView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _reactRouterDom = require('react-router-dom');
  var _propTypes = require('prop-types');
  var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
  var _reactBootstrapForm = require('react-bootstrap/Form');
  var _reactBootstrapFormDefault = _parcelHelpers.interopDefault(_reactBootstrapForm);
  var _reactBootstrapButton = require('react-bootstrap/Button');
  var _reactBootstrapButtonDefault = _parcelHelpers.interopDefault(_reactBootstrapButton);
  var _reactBootstrapAlert = require('react-bootstrap/Alert');
  var _reactBootstrapAlertDefault = _parcelHelpers.interopDefault(_reactBootstrapAlert);
  var _jsxFileName = "/Users/alexsneath/careerfoundry/myFlix-client/src/components/login-view/login-view.jsx", _s = $RefreshSig$();
  function LoginView(props) {
    _s();
    const [username, setUsername] = _react.useState('');
    const [password, setPassword] = _react.useState('');
    const [show, setShow] = _react.useState(false);
    const handleSumbit = e => {
      e.preventDefault();
      _axiosDefault.default.post('https://alexdb.herokuapp.com/login', {
        Username: username,
        Password: password
      }).then(response => {
        const data = response.data;
        props.onLoggedIn(data);
      }).catch(e => {
        setShow(true);
        console.log('no such user');
      });
    };
    {
      if (show) {
        return (
          /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapAlertDefault.default, {
            variant: "danger",
            onClose: () => setShow(false),
            dismissible: true,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33,
              columnNumber: 7
            }
          }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapAlertDefault.default.Heading, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34,
              columnNumber: 9
            }
          }, "Oh snap! You got an error!"), /*#__PURE__*/_reactDefault.default.createElement("p", {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 35,
              columnNumber: 9
            }
          }, "Change this and that and try again. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum."))
        );
      }
    }
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
        controlId: "username",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47,
          columnNumber: 9
        }
      }, "Username:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
        type: "text",
        value: username,
        onChange: e => setUsername(e.target.value),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48,
          columnNumber: 9
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
        controlId: "password",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52,
          columnNumber: 9
        }
      }, "Password:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
        type: "password",
        value: password,
        onChange: e => setPassword(e.target.value),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53,
          columnNumber: 9
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
        variant: "primary",
        type: "submit",
        onClick: handleSumbit,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56,
          columnNumber: 7
        }
      }, "Submit"), ' ', /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Link, {
        to: "/register",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
        variant: "secondary",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58,
          columnNumber: 9
        }
      }, "Sign up")))
    );
  }
  _s(LoginView, "62KCN7K9MC0QMF0QUbBL4DFuO5Q=");
  _c = LoginView;
  LoginView.propTypes = {
    username: _propTypesDefault.default.string,
    password: _propTypesDefault.default.string
  };
  var _c;
  $RefreshReg$(_c, "LoginView");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
